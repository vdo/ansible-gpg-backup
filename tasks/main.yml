---

- name: Check local gpg commands
  ansible.builtin.command:
    cmd: "{{ item }}"
  changed_when: false
  vars:
    ansible_become: false
  with_items:
    - "gpg --version"

- name: Import keys from keyserver
  ansible.builtin.command:
    cmd: "gpg --batch  --keyserver {{ gpg_keyserver }} --recv-keys {{ item }}"
  with_items: "{{ gpg_import_keys }}"
  changed_when: false
  when:
    - (gpg_import_keys is defined) and (gpg_import_keys | length > 0)

- name: Set backup random suffix
  ansible.builtin.set_fact:
    backup_random_suffix: "{{ lookup('password', '/dev/null chars=ascii_lowercase,digits length=8') }}"

- name: Set backup host prefix
  ansible.builtin.set_fact:
    backup_host_prefix: "{{ inventory_hostname | replace('.', '_') }}"

- name: Generate recipents list
  set_fact:
    gpg_recipients_params: "{{ gpg_recipients_params | default('') + '-r ' + item + ' '}}"
  loop: "{{ gpg_recipients }}"

- block:
  - name: Create backup tarballs
    ansible.builtin.command:
      cmd: "tar czf {{ remote_backup_temp_path }}/{{ backup_host_prefix }}_{{ item | replace('/', '_') | replace('*', '@') }}_{{ backup_random_suffix }}.tgz {{ item }}"
    with_items: "{{ remote_backup_paths }}"

  - name: Encrypt backup files
    ansible.builtin.shell:
      executable: /bin/bash
      cmd: >
        set -o pipefail &&
        cat {{ remote_backup_temp_path }}/{{ backup_host_prefix }}_{{ item | replace('/', '_') | replace('*', '@') }}_{{ backup_random_suffix }}.tgz
        | gpg --batch --trust-model always --encrypt {{ gpg_recipients_params }} -o {{ remote_backup_temp_path }}/{{ backup_host_prefix }}_{{ item | replace('/', '_')
        | replace('*', '@') }}_{{ backup_random_suffix }}.tgz.gpg
    with_items: "{{ remote_backup_paths }}"

  - name: Fetch tarballs
    ansible.builtin.fetch:
      src: "{{ remote_backup_temp_path }}/{{ backup_host_prefix }}_{{ item | replace('/', '_') | replace('*', '@') }}_{{ backup_random_suffix }}.tgz.gpg"
      dest: "{{ local_backup_temp_path }}/{{ backup_host_prefix }}_{{ item | replace('/', '_') | replace('*', '@') }}_{{ backup_random_suffix }}.tgz.gpg"
      flat: true
    with_items: "{{ remote_backup_paths }}"

  always:
  - name: Safely delete remote tarballs
    ansible.builtin.shell:
      cmd: |
        shred -uz {{ remote_backup_temp_path }}/{{ backup_host_prefix }}_{{ item | replace('/', '_') | replace('*', '@') }}_{{ backup_random_suffix }}.*
    with_items: "{{ remote_backup_paths }}"
    ignore_errors: true
